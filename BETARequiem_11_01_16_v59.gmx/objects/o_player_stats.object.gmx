<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-13000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(1920,1080);
right = view_xview[0]+view_wview[0];
bottom = view_yview[0]+view_hview[0];
advancemenu = false;
time = 0;
dead = false;
riptide = 0;
/// Create player stats
lvl = 1;
gold = 0;
xpscale = 0.2 * lvl;
xp = 0;
maxexp = 230 + lvl * 100 * xpscale;
rage = 0;
maxrage = 0;
//Upgrades
dmgupgrade = 0;
hpupgrade = 0;
spdupgrade = 0;
mpupgrade = 0;
spellupgrade = 0;
upgrade = 0;
increase = 0;
//WARRIOR STATISTICS
if o_characterpicker.warrior = 1 {
    scale = 0.1 + 0.05 * lvl;
    mpscale = 0.02 + 0.01 * lvl;
    hp = 180 + lvl * 100 * scale;
    maxhp = hp;
    hpregen = maxhp * 0.0005;
    mp = 80 + lvl * 100 * mpscale;
    maxmp = mp;
    mpregen = 0.02 + 0.01 * lvl;
    //Ability Cooldowns
    rc_cooldown = 0;
    q_cooldown = 0;
    e_cooldown = 0;
    maxrc_cooldown = 90; //1.50 seconds
    maxq_cooldown = 480; //8.00 seconds
    maxe_cooldown = 600; //10.00 seconds
    
}



//ARCHER STATISTICS
if o_characterpicker.archer = 1 {
    scale = 0.08 + 0.02 * lvl;
    mpscale = 0.12 + 0.03 * lvl;
    hp = 100 + lvl * 100 * scale;
    maxhp = hp;
    hpregen = maxhp * 0.0002;
    mp = 150 + lvl * 100 * mpscale;
    maxmp = mp;
    mpregen = 0.05 + 0.03 * lvl;
    rc_cooldown = 0;
    q_cooldown = 0;
    e_cooldown = 0;
    maxrc_cooldown = 180; //3.00 seconds
    maxq_cooldown = 180; //3.00 seconds
    maxe_cooldown = 600; //10.00 seconds
}

///ROGUE STATISTICS
if o_characterpicker.rogue = 1 {
    scale = 0.09 + 0.03 * lvl;
    mpscale = 0.09 + 0.03 * lvl;
    hp = 130 + lvl * 100 * scale;
    maxhp = hp;
    hpregen = maxhp * 0.0003;
    mp = 150 + lvl * 100 * mpscale;
    maxmp = mp;
    mpregen = 0.05 + 0.03 * lvl;
    rc_cooldown = 0;
    q_cooldown = 0;
    e_cooldown = 0;
    maxrc_cooldown = 180; //3.00 seconds
    maxq_cooldown = 240; //4.00 seconds
    maxe_cooldown = 540; //9.00 seconds
}

///MAGE STATISTICS
if o_characterpicker.mage = 1 {
    scale = 0.06 + 0.03 * lvl;
    mpscale = 0.14 + 0.03 * lvl;
    hp = 120 + lvl * 100 * scale;
    maxhp = hp;
    hpregen = maxhp * 0.0003;
    mp = 200 + lvl * 100 * mpscale;
    maxmp = mp;
    mpregen = 0.08 + 0.03 * lvl;
    rc_cooldown = 0;
    q_cooldown = 0;
    e_cooldown = 0;
    maxrc_cooldown = 180; //3.00 seconds
    maxq_cooldown = 240; //4.00 seconds
    maxe_cooldown = 540; //9.00 seconds
}


//Ability Timers
/*Defend Duration*/
defendbuff = 0; //not shown; max duration 5.00 seconds
/*Willpower Passive*/
//Actual Buff timer
willpowerbuff = 0;
maxwillpowerbuff = 300; //5.00 seconds
//Cooldown
willpower_cooldown = 0;
maxwillpower_cooldown = 2400; //40.00 seconds

/*Flurry Buff*/
flurrybuff = 0;
maxflurrybuff = 120; //2.00 seconds
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time += 1;
if dead == false {
mp += mpregen;
hp += hpregen;
rage -= 0.0001 + 0.0003 * rage;
}
//CHECK FOR ADVANCEMENT
if lvl == 10 &amp;&amp; advancemenu == false {
    advancemenu = true;
    instance_create(right/2, bottom/2, o_advancemenuborder);
    
    instance_create(right/2, bottom/2, o_retainclass);
    if o_characterpicker.warrior == 1 {
        instance_create(right/2, bottom/2,o_berserkerpick);
        instance_create(right/2, bottom/2, o_crusaderpick);
        }
    if o_characterpicker.archer == 1 {
        instance_create(right/2, bottom/2,o_sniperpick);
        instance_create(right/2, bottom/2, o_hunterpick);
        }
    if o_characterpicker.rogue == 1 {
        instance_create(right/2, bottom/2,o_bladedancerpick);
        instance_create(right/2, bottom/2,o_assassinpick);        
        }
    if o_characterpicker.mage == 1 {
        instance_create(right/2, bottom/2,o_firemagipick);
        instance_create(right/2, bottom/2,o_frostwizardpick);
        }
        
    }
    
if xp &gt;= maxexp
{
xp -= maxexp;
lvl += 1



    
instance_create(o_player.x, o_player.y, o_levelupaura);

///WARRIOR STATISTICS
if o_characterpicker.warrior = 1 {
    scale = 0.1 + 0.05 * lvl;
    mpscale = 0.1 + 0.01 * lvl;
    hp = (200 + lvl * 100 * scale) * (1 + 0.08 * hpupgrade);
    maxhp = hp;
    mp = (80 + lvl * 100 * mpscale) * (1 + 0.1 * mpupgrade);
    maxmp = mp;
    
}
//BERSERKER STATISTICS
if o_characterpicker.berserker = 1 {
    scale = 0.1 + 0.05 * lvl;
    hp = (180 + lvl * 80 * scale) * (1 + 0.08 * hpupgrade);
    maxhp = hp;
    hpregen = maxhp * 0.0005;
    rage = 25 + 5 * lvl;
    maxrage = rage;
}
//CRUSADER STATISTICS
if o_characterpicker.crusader = 1 {
    scale = 0.1 + 0.06 * lvl;
    mpscale = 0.1 + 0.01 * lvl;
    hp = (250 + lvl * 110 * scale) * (1 + 0.08 * hpupgrade);
    maxhp = hp;
    mp = (80 + lvl * 100 * mpscale) * (1 + 0.1 * mpupgrade);
    maxmp = mp;
    
}


///ARCHER STATISTICS
if o_characterpicker.archer = 1 {
    scale = 0.08 + 0.02 * lvl;
    mpscale = 0.15 + 0.015 * lvl;
    hp = (100 + lvl * 100 * scale) * (1 + 0.08 * hpupgrade);
    maxhp = hp;
    mp = (150 + lvl * 100 * mpscale) * (1 + 0.1 * mpupgrade);
    maxmp = mp;
}
//SNIPER STATISTICS
if o_characterpicker.sniper = 1 {
    scale = 0.08 + 0.02 * lvl;
    mpscale = 0.12 + 0.03 * lvl;
    hp = (100 + lvl * 100 * scale) * (1 + 0.08 * hpupgrade);
    maxhp = hp;
    hpregen = maxhp * 0.0003;
    mp = (150 + lvl * 100 * mpscale) * (1 + 0.1 * mpupgrade);
    maxmp = mp;
    


}
//HUNTER STATISTICS
if o_characterpicker.hunter = 1 {
    scale = 0.08 + 0.02 * lvl;
    mpscale = 0.12 + 0.03 * lvl;
    hp = (100 + lvl * 100 * scale) * (1 + 0.08 * hpupgrade);
    maxhp = hp;
    hpregen = maxhp * 0.0002;
    mp = (200 + lvl * 100 * mpscale) * (1 + 0.1 * mpupgrade);
    maxmp = mp;
    
}
///ROGUE STATISTICS
if o_characterpicker.rogue = 1 {
    scale = 0.09 + 0.03 * lvl;
    mpscale = 0.09 + 0.03 * lvl;
    hp = (130 + lvl * 100 * scale) * (1 + 0.08 * hpupgrade);
    maxhp = hp;
    hpregen = maxhp * 0.0003;
    mp = (150 + lvl * 100 * mpscale) * (1 + 0.1 * mpupgrade);
    maxmp = mp;
    
}
//ASSASSIN STATISTICS
if o_characterpicker.assassin = 1 {
    scale = 0.09 + 0.03 * lvl;
    mpscale = 0.09 + 0.03 * lvl;
    hp = (130 + lvl * 100 * scale) * (1 + 0.08 * hpupgrade);
    maxhp = hp;
    hpregen = maxhp * 0.0003;
    mp = (150 + lvl * 100 * mpscale) * (1 + 0.1 * mpupgrade);
    maxmp = mp;
    
}
//BLADE DANCER STATISTICS
if o_characterpicker.bladedancer = 1 {
    scale = 0.09 + 0.03 * lvl;
    mpscale = 0.09 + 0.03 * lvl;
    hp = (130 + lvl * 100 * scale) * (1 + 0.08 * hpupgrade);
    maxhp = hp;
    hpregen = maxhp * 0.0003;
    mp = (150 + lvl * 100 * mpscale) * (1 + 0.1 * mpupgrade);
    maxmp = mp;
    
}

///MAGE STATISTICS
if o_characterpicker.mage = 1 {
    scale = 0.06 + 0.03 * lvl;
    mpscale = 0.14 + 0.03 * lvl;
    hp = 120 + lvl * 100 * scale;
    maxhp = hp;
    hpregen = maxhp * 0.0003;
    mp = 200 + lvl * 100 * mpscale;
    maxmp = mp;
    
}

//FIRE MAGI STATISTICS
if o_characterpicker.firemagi = 1 {
    scale = 0.06 + 0.03 * lvl;
    mpscale = 0.14 + 0.03 * lvl;
    hp = 120 + lvl * 100 * scale;
    maxhp = hp;
    hpregen = maxhp * 0.0003;
    mp = 200 + lvl * 110 * mpscale;
    maxmp = mp;
    
}

//FROST WIZARDSTATISTICS
if o_characterpicker.frostwizard = 1 {
    scale = 0.06 + 0.03 * lvl;
    mpscale = 0.14 + 0.03 * lvl;
    hp = 120 + lvl * 100 * scale;
    maxhp = hp;
    hpregen = maxhp * 0.0003;
    mp = 200 + lvl * 110 * mpscale;
    maxmp = mp;
    
}

xpscale = 0.15 * lvl;
xp = 0;
maxexp = 230 + lvl * 100 * xpscale;

}
//HP/MP/RAGE checks
if hp &lt; 0
    hp = 0;
if hp &gt; maxhp
    hp = maxhp;
if mp &lt; 0
    mp = 0;
if mp &gt; maxmp
    mp = maxmp;
if rage &lt; 0
    rage = 0;
if rage &gt; maxrage
    rage = maxrage;

//Check for dying
if hp == 0 {
    if !instance_exists(o_youhavedied)
        instance_create(view_xview[0] + view_wview[0]/2,view_yview[0] + view_hview[0]/2,o_youhavedied);
    with (o_player)
        instance_destroy();
    dead = true;
    
    }

//Cooldown Checks
if rc_cooldown &gt; 0 
    rc_cooldown -= 1;
if q_cooldown &gt; 0
    q_cooldown -= 1;
if e_cooldown &gt; 0
    e_cooldown -= 1;

//WIllpower Check
if hp &lt;= maxhp * 0.2 &amp;&amp; willpower_cooldown &lt;= 0 {
    willpowerbuff = maxwillpowerbuff;
    willpower_cooldown = maxwillpower_cooldown;    
    }
if willpower_cooldown &gt; 0
    willpower_cooldown -= 1;
//Start Willpower buff timer
if o_characterpicker.warrior = 1 {
if willpowerbuff &gt; 0 {
    if willpowerbuff == maxwillpowerbuff
        instance_create(o_warrior.x,o_warrior.y,o_willpoweraura);
    willpowerbuff -= 1;
    hp += (maxhp * 0.1) / 60
    }
}
    

//Flurry Buff Timer
if flurrybuff &gt; 0 {
    flurrybuff -= 1;
    }
    

//ADVANCEMENT CHECKS
//WARRIOR
if o_characterpicker.warrior = 1 &amp;&amp; lvl == 20 &amp;&amp; advancemenu = false {
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw stats
//HP
if instance_exists(o_player) {
if hp != 0 {
draw_sprite_ext(spr_HPBar, 1, 81, 52, (100 / (maxhp/hp)) / 65, 0.8, 0, c_white, 1); }
draw_sprite_ext(spr_GUIHP, 1, 16, 32, 5, 5, 0, c_white, 1);
//EXP
draw_sprite_ext(spr_EXPBar, 1, 108.5, 140, (100 / (maxexp/(xp+1))) / 120, 0.45, 0, c_white, 1);
draw_sprite_ext(spr_GUIXP, 1, 26, 130, 2.5, 2.5, 0, c_white, 1);
//MP
if mp != 0 
    draw_sprite_ext(spr_MPBar, 1, 81, 100, (100 / (maxmp/mp)) / 65, 0.8, 0, c_white, 1);
draw_sprite_ext(spr_GUIMP, 1, 16, 80, 5, 5, 0, c_white, 1);
//IF RAGE EXISTS
if rage != 0 {
draw_sprite_ext(spr_RAGEBar, 1, 81, 100, (100 / (maxrage/rage)) / 65, 0.8, 0, c_white, 1);
draw_text_colour(100,100, string(rage) + "/" + string(maxrage), c_white, c_white, c_white, c_white, 0.8);
draw_sprite_ext(spr_GUIRAGE, 1, 16, 80, 5, 5, 0, c_white, 1);
}
//TEXT
draw_text_colour(100, 52, string(hp) + "/" + string(maxhp), c_white, c_white, c_white, c_white, 0.8);
draw_text_colour(58.5, 140, string(lvl), c_white, c_white, c_white, c_white, 0.8);
draw_text_colour(16, 220, "EXP:" + string(xp) + "/" + string(maxexp), c_white, c_white, c_white, c_white, 0.8);
draw_text_colour(16, 194, "LOST SOULS: " +string(gold), c_white, c_white, c_white, c_white, 0.8);
if mp != 0 
    draw_text_colour(100,100, string(mp) + "/" + string(maxmp), c_white, c_white, c_white, c_white, 0.8);


///ABILITIES

//WARRIOR SKILLS
if o_characterpicker.warrior = 1 {
//RC
draw_sprite_ext(spr_cleave, 1, 1600, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1560, 940, "RightClick", c_white, c_white, c_white, c_white, 1);
if rc_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1600, 1036, 3, (100 / (maxrc_cooldown/rc_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1600, 1036, (rc_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }
//Q
draw_sprite_ext(spr_intimidate,1, 1700, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1700, 940, "Q", c_white, c_white, c_white, c_white, 1);
if q_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1 , 1700, 1036, 3, (100 / (maxq_cooldown/q_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1700, 1036, (q_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }
//E
draw_sprite_ext(spr_defend, 1, 1800, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1800, 940, "E", c_white, c_white, c_white, c_white, 1);
if e_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1800, 1036, 3, (100 / (maxe_cooldown/e_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1800, 1036, (e_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }

//Innate
draw_sprite_ext(spr_willpower, 1, 1500, 1000, 2, 2, 0, c_white, 1);
draw_text_colour(1470, 940, "Innate", c_white, c_white, c_white, c_white, 1);
if willpower_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1500, 1024, 2, (100/ (maxwillpower_cooldown/willpower_cooldown)) / 50, 0, c_white, 0.6);
    draw_text_colour(1500, 1036, (willpower_cooldown/ 60), c_white, c_white, c_white, c_white, 1);
    }
}
//BERSERKER SKILLS

if o_characterpicker.berserker = 1 {
//RC
draw_sprite_ext(spr_riptide, 1, 1600, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1560, 940, "RightClick", c_white, c_white, c_white, c_white, 1);
if rc_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1600, 1036, 3, (100 / (maxrc_cooldown/rc_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1600, 1036, (rc_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }
//Q
draw_sprite_ext(spr_leap,1, 1700, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1700, 940, "Q", c_white, c_white, c_white, c_white, 1);
if q_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1 , 1700, 1036, 3, (100 / (maxq_cooldown/q_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1700, 1036, (q_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }

//E
draw_sprite_ext(spr_cataclysm, 1, 1800, 1000, 3, 3, 0, c_white, 1); 
draw_text_colour(1800, 940, "E", c_white, c_white, c_white, c_white, 1);
if e_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1800, 1036, 3, (100 / (maxe_cooldown/e_cooldown)) / 35, 0 , c_white, 0.6);
    draw_text_colour(1800, 1036, (e_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }

//Innate
draw_sprite_ext(spr_rage, 1, 1500, 1000, 2, 2, 0, c_white, 1);
draw_text_colour(1470, 940, "Innate", c_white, c_white, c_white, c_white, 1);
}
//CRUSADER SKILLS
if o_characterpicker.crusader = 1 {
//RC
draw_sprite_ext(spr_repel, 1, 1600, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1560, 940, "RightClick", c_white, c_white, c_white, c_white, 1);
if rc_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1600, 1036, 3, (100 / (maxrc_cooldown/rc_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1600, 1036, (rc_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }

//Q
draw_sprite_ext(spr_denyevil,1, 1700, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1700, 940, "Q", c_white, c_white, c_white, c_white, 1);
if q_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1 , 1700, 1036, 3, (100 / (maxq_cooldown/q_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1700, 1036, (q_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }
//E
draw_sprite_ext(spr_bulwark, 1, 1800, 1000, 3, 3, 0, c_white, 1); 
draw_text_colour(1800, 940, "E", c_white, c_white, c_white, c_white, 1);
if e_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1800, 1036, 3, (100 / (maxe_cooldown/e_cooldown)) / 35, 0 , c_white, 0.6);
    draw_text_colour(1800, 1036, (e_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }
//INNATE    
draw_sprite_ext(spr_heroicfortitude, 1, 1500, 1000, 2, 2, 0, c_white, 1);
draw_text_colour(1470, 940, "Innate", c_white, c_white, c_white, c_white, 1);
if instance_exists(o_crusader)
    if o_crusader.fortitude != 0  {
        draw_sprite_ext(spr_cooldownhover, 1, 1500, 1024, 2, (100/ (o_crusader.maxfortitude/o_crusader.fortitude)) / 50, 0, c_white, 0.6);
        draw_text_colour(1500, 1036, (o_crusader.fortitude/ 60), c_white, c_white, c_white, c_white, 1);
    }
}



//ARCHER SKILLS
if o_characterpicker.archer = 1 {
//RC
draw_sprite_ext(spr_flurry, 1, 1600, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1560, 940, "RightClick", c_white, c_white, c_white, c_white, 1);
if rc_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1600, 1036, 3, (100 / (maxrc_cooldown/rc_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1600, 1036, (rc_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }

//Q
draw_sprite_ext(spr_strafe, 1, 1700, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1700, 940, "Q", c_white, c_white, c_white, c_white, 1);
if q_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1700, 1036, 3, (100 / (maxq_cooldown/ q_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1700, 1036, (q_cooldown/ 60), c_white, c_white, c_white, c_white, 1);
    }

//E
draw_sprite_ext(spr_barrage, 1, 1800, 1000, 3, 3, 0, c_white, 1); 
draw_text_colour(1800, 940, "E", c_white, c_white, c_white, c_white, 1);
if e_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1800, 1036, 3, (100 / (maxe_cooldown/e_cooldown)) / 35, 0 , c_white, 0.6);
    draw_text_colour(1800, 1036, (e_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }

//Innate
draw_sprite_ext(spr_steadyaim, 1, 1500, 1000, 2, 2, 0, c_white, 1);
draw_text_colour(1470, 940, "Innate", c_white, c_white, c_white, c_white, 1);
}

//SNIPER SKILLS
if o_characterpicker.sniper = 1 {
//RC
draw_sprite_ext(spr_snipe, 1, 1600, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1560, 940, "RightClick", c_white, c_white, c_white, c_white, 1);
if rc_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1600, 1036, 3, (100 / (maxrc_cooldown/rc_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1600, 1036, (rc_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }

//Q
draw_sprite_ext(spr_retreat, 1, 1700, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1700, 940, "Q", c_white, c_white, c_white, c_white, 1);
if q_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1700, 1036, 3, (100 / (maxq_cooldown/ q_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1700, 1036, (q_cooldown/ 60), c_white, c_white, c_white, c_white, 1);
    }
    
//E
draw_sprite_ext(spr_deploytrap, 1, 1800, 1000, 3, 3, 0, c_white, 1); 
draw_text_colour(1800, 940, "E", c_white, c_white, c_white, c_white, 1);
if e_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1800, 1036, 3, (100 / (maxe_cooldown/e_cooldown)) / 35, 0 , c_white, 0.6);
    draw_text_colour(1800, 1036, (e_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }

//Innate
draw_sprite_ext(spr_precision, 1, 1500, 1000, 2, 2, 0, c_white, 1);
draw_text_colour(1470, 940, "Innate", c_white, c_white, c_white, c_white, 1);
}
//HUNTER SKILLS
if o_characterpicker.hunter = 1 {
//RC
draw_sprite_ext(spr_twinfangs, 1, 1600, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1560, 940, "RightClick", c_white, c_white, c_white, c_white, 1);
if rc_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1600, 1036, 3, (100 / (maxrc_cooldown/rc_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1600, 1036, (rc_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }

//Q
draw_sprite_ext(spr_spraynpray, 1, 1700, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1700, 940, "Q", c_white, c_white, c_white, c_white, 1);
if q_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1700, 1036, 3, (100 / (maxq_cooldown/ q_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1700, 1036, (q_cooldown/ 60), c_white, c_white, c_white, c_white, 1);
    }
    
//E
draw_sprite_ext(spr_relentless, 1, 1800, 1000, 3, 3, 0, c_white, 1); 
draw_text_colour(1800, 940, "E", c_white, c_white, c_white, c_white, 1);
if e_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1800, 1036, 3, (100 / (maxe_cooldown/e_cooldown)) / 35, 0 , c_white, 0.6);
    draw_text_colour(1800, 1036, (e_cooldown/60), c_white, c_white, c_white, c_white, 1);
    }

//Innate
draw_sprite_ext(spr_steelbolts, 1, 1500, 1000, 2, 2, 0, c_white, 1);
draw_text_colour(1470, 940, "Innate", c_white, c_white, c_white, c_white, 1);
if o_hunter.steel != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1500, 1024, 2, (100/ (20/o_hunter.steel)) / 50, 0, c_white, 0.6);
    draw_text_colour(1500, 1036, string(o_hunter.steel)+ "/" +string(20), c_white, c_white, c_white, c_white, 1);
    }
    
}

///ROGUE SKILLS
if o_characterpicker.rogue = 1 {
//RC
draw_sprite_ext(spr_dash, 1, 1600, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1560, 940, "RightClick", c_white, c_white, c_white, c_white, 1);
if rc_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1600, 1036, 3, (100 / (maxrc_cooldown/rc_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1600, 1036, (rc_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }
    
//Q
draw_sprite_ext(spr_vitalstrike, 1, 1700, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1700, 940, "Q", c_white, c_white, c_white, c_white, 1);
if q_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1700, 1036, 3, (100 / (maxq_cooldown/ q_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1700, 1036, (q_cooldown/ 60), c_white, c_white, c_white, c_white, 1);
    }
    
//E
draw_sprite_ext(spr_fade, 1, 1800, 1000, 3, 3, 0, c_white, 1); 
draw_text_colour(1800, 940, "E", c_white, c_white, c_white, c_white, 1);
if e_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1800, 1036, 3, (100 / (maxe_cooldown/e_cooldown)) / 35, 0 , c_white, 0.6);
    draw_text_colour(1800, 1036, (e_cooldown/60), c_white, c_white, c_white, c_white, 1);
    }
//Innate
draw_sprite_ext(spr_envenom, 1, 1500, 1000, 2, 2, 0, c_white, 1);
draw_text_colour(1470, 940, "Innate", c_white, c_white, c_white, c_white, 1);
}
//BLADE DANCER SKILLS
if o_characterpicker.bladedancer = 1 {
//RC
draw_sprite_ext(spr_slashstorm, 1, 1600, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1560, 940, "RightClick", c_white, c_white, c_white, c_white, 1);
if rc_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1600, 1036, 3, (100 / (maxrc_cooldown/rc_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1600, 1036, (rc_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }

//Q
draw_sprite_ext(spr_rend,1, 1700, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1700, 940, "Q", c_white, c_white, c_white, c_white, 1);
if q_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1 , 1700, 1036, 3, (100 / (maxq_cooldown/q_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1700, 1036, (q_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }
        
//E
draw_sprite_ext(spr_bladedance, 1, 1800, 1000, 3, 3, 0, c_white, 1); 
draw_text_colour(1800, 940, "E", c_white, c_white, c_white, c_white, 1);
if e_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1800, 1036, 3, (100 / (maxe_cooldown/e_cooldown)) / 35, 0 , c_white, 0.6);
    draw_text_colour(1800, 1036, (e_cooldown/60), c_white, c_white, c_white, c_white, 1);
    }

//Innate
draw_sprite_ext(spr_bladefury, 1, 1500, 1000, 2, 2, 0, c_white, 1);
draw_text_colour(1470, 940, "Innate", c_white, c_white, c_white, c_white, 1);
if o_bladedancer.stack != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1500, 1024, 2, (100/ (5/o_bladedancer.stack)) / 50, 0, c_white, 0.6);
    draw_text_colour(1500, 1036, string(o_bladedancer.stack)+ "/" +string(5), c_white, c_white, c_white, c_white, 1);
    }
    
}

//ASSASSIN SKILLS
if o_characterpicker.assassin = 1 {
//RC
draw_sprite_ext(spr_shadowstrike, 1, 1600, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1560, 940, "RightClick", c_white, c_white, c_white, c_white, 1);
if rc_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1600, 1036, 3, (100 / (maxrc_cooldown/rc_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1600, 1036, (rc_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }

//Q
draw_sprite_ext(spr_maelstorm,1, 1700, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1700, 940, "Q", c_white, c_white, c_white, c_white, 1);
if q_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1 , 1700, 1036, 3, (100 / (maxq_cooldown/q_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1700, 1036, (q_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }
        
//E
draw_sprite_ext(spr_shadowpartner, 1, 1800, 1000, 3, 3, 0, c_white, 1); 
draw_text_colour(1800, 940, "E", c_white, c_white, c_white, c_white, 1);
if e_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1800, 1036, 3, (100 / (maxe_cooldown/e_cooldown)) / 35, 0 , c_white, 0.6);
    draw_text_colour(1800, 1036, (e_cooldown/60), c_white, c_white, c_white, c_white, 1);
    }

//Innate
draw_sprite_ext(spr_sleightofhand, 1, 1500, 1000, 2, 2, 0, c_white, 1);
draw_text_colour(1470, 940, "Innate", c_white, c_white, c_white, c_white, 1);    
}

///MAGE SKILLS
if o_characterpicker.mage = 1 {
//RC
draw_sprite_ext(spr_fireball, 1, 1600, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1560, 940, "RightClick", c_white, c_white, c_white, c_white, 1);
if rc_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1600, 1036, 3, (100 / (maxrc_cooldown/rc_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1600, 1036, (rc_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }

//Q
draw_sprite_ext(spr_icewave,1, 1700, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1700, 940, "Q", c_white, c_white, c_white, c_white, 1);
if q_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1 , 1700, 1036, 3, (100 / (maxq_cooldown/q_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1700, 1036, (q_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }
        
//E
draw_sprite_ext(spr_Frostflame, 1, 1800, 1000, 3, 3, 0, c_white, 1); 
draw_text_colour(1800, 940, "E", c_white, c_white, c_white, c_white, 1);
if e_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1800, 1036, 3, (100 / (maxe_cooldown/e_cooldown)) / 35, 0 , c_white, 0.6);
    draw_text_colour(1800, 1036, (e_cooldown/60), c_white, c_white, c_white, c_white, 1);
    }

//Innate
draw_sprite_ext(spr_equilibrium, 1, 1500, 1000, 2, 2, 0, c_white, 1);
draw_text_colour(1470, 940, "Innate", c_white, c_white, c_white, c_white, 1);    
}

///FIRE MAGI SKILLS
if o_characterpicker.firemagi = 1 {
//RC
draw_sprite_ext(spr_pillarofflame, 1, 1600, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1560, 940, "RightClick", c_white, c_white, c_white, c_white, 1);
if rc_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1600, 1036, 3, (100 / (maxrc_cooldown/rc_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1600, 1036, (rc_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }

//Q
draw_sprite_ext(spr_burningconduit,1, 1700, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1700, 940, "Q", c_white, c_white, c_white, c_white, 1);
if q_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1 , 1700, 1036, 3, (100 / (maxq_cooldown/q_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1700, 1036, (q_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }
        
//E
draw_sprite_ext(spr_fireelemental, 1, 1800, 1000, 3, 3, 0, c_white, 1); 
draw_text_colour(1800, 940, "E", c_white, c_white, c_white, c_white, 1);
if e_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1800, 1036, 3, (100 / (maxe_cooldown/e_cooldown)) / 35, 0 , c_white, 0.6);
    draw_text_colour(1800, 1036, (e_cooldown/60), c_white, c_white, c_white, c_white, 1);
    }

//Innate
draw_sprite_ext(spr_ignite, 1, 1500, 1000, 2, 2, 0, c_white, 1);
draw_text_colour(1470, 940, "Innate", c_white, c_white, c_white, c_white, 1);    
}

///FROST WIZARD SKILLS
if o_characterpicker.frostwizard = 1 {
//RC
draw_sprite_ext(spr_glacier, 1, 1600, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1560, 940, "RightClick", c_white, c_white, c_white, c_white, 1);
if rc_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1600, 1036, 3, (100 / (maxrc_cooldown/rc_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1600, 1036, (rc_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }

//Q
draw_sprite_ext(spr_shatter,1, 1700, 1000, 3, 3, 0, c_white, 1);
draw_text_colour(1700, 940, "Q", c_white, c_white, c_white, c_white, 1);
if q_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1 , 1700, 1036, 3, (100 / (maxq_cooldown/q_cooldown)) / 35, 0, c_white, 0.6);
    draw_text_colour(1700, 1036, (q_cooldown / 60), c_white, c_white, c_white, c_white, 1);
    }

//E
draw_sprite_ext(spr_blizzard, 1, 1800, 1000, 3, 3, 0, c_white, 1); 
draw_text_colour(1800, 940, "E", c_white, c_white, c_white, c_white, 1);
if e_cooldown != 0 {
    draw_sprite_ext(spr_cooldownhover, 1, 1800, 1036, 3, (100 / (maxe_cooldown/e_cooldown)) / 35, 0 , c_white, 0.6);
    draw_text_colour(1800, 1036, (e_cooldown/60), c_white, c_white, c_white, c_white, 1);
    }
        

//Innate
draw_sprite_ext(spr_frostbite, 1, 1500, 1000, 2, 2, 0, c_white, 1);
draw_text_colour(1470, 940, "Innate", c_white, c_white, c_white, c_white, 1);    
}



//BOSSES

    
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lvl += 1;
gold += 1000;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
