<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9900</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init inventoty values

totalSlots = 19;
curSlot = 0;

for(i = 0; i &lt; totalSlots; i++) global.slot[i] = "noone"; //creating all of the slots as empty
for(i = 0; i &lt; totalSlots; i++) global.slotCount[i] = 0; //creating all of the slots as 0 items in them
for(i = 0; i &lt; totalSlots; i++) coordX[i] = 0; //creating the coordinate x system
for(i = 0; i &lt; totalSlots; i++) coordY[i] = 0; //creating the coordinate y system

canDraw = false; //can draw the inventory

//global.points = 5;
quickSwapCount = 15;

initInventory(); //initializing all of the item values

spr = nosprite; //we need this sprite for moving objects around the inventory
slotTaken = -1; //used for trasferring objects in inventory
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drawing the gui switch

if(keyboard_check_pressed(vk_lshift) &amp;&amp; !canDraw){
canDraw = true;
return 0;
}
if(keyboard_check_pressed(vk_lshift) &amp;&amp; canDraw){
canDraw = false;
spr = nosprite;
return 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///quick swap 

if(keyboard_check_pressed(ord("E"))) //equipping towards right
{
    var slot15 = global.slot[15];
    var slot16 = global.slot[16];
    var slot17 = global.slot[17];
    
    var slot15Count = global.slotCount[15];
    var slot16Count = global.slotCount[16];
    var slot17Count = global.slotCount[17];
    
    var equipSlot = global.slot[18];
    var equipSlotCount = global.slotCount[18];

    global.slot[18] = slot17;
    global.slotCount[18] = slot17Count;
    
    global.slot[17] = slot16;
    global.slotCount[17] = slot16Count;
    
    global.slot[16] = slot15;
    global.slotCount[16] = slot15Count;
    
    global.slot[15] = equipSlot;
    global.slotCount[15] = equipSlotCount;
    
}else if(keyboard_check_pressed(ord("Q"))) //equipping towards left
{

    var slot15 = global.slot[15];
    var slot16 = global.slot[16];
    var slot17 = global.slot[17];
    
    var slot15Count = global.slotCount[15];
    var slot16Count = global.slotCount[16];
    var slot17Count = global.slotCount[17];
    
    var equipSlot = global.slot[18];
    var equipSlotCount = global.slotCount[18];

    global.slot[18] = slot15;
    global.slotCount[18] = slot15Count;
    
    global.slot[17] = equipSlot;
    global.slotCount[17] = equipSlotCount;
    
    global.slot[16] = slot17;
    global.slotCount[16] = slot17Count;
    
    global.slot[15] = slot16;
    global.slotCount[15] = slot16Count;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var cellWidth = 28; //Width of each box
var cellHeight = 28; //Height of each box

draw_set_font(font_starbound);

if(canDraw) //drawing inventory
{
    draw_set_color(c_gray);
    draw_set_alpha(0.8);
    //Size of outer shell/grey box
    var startX = view_xview[0]+66;
    var startY = view_yview[0]+44;
    var width = 352;
    var height = 188;
    
    draw_rectangle(startX, startY, startX+width, startY+height, false); //
    
    for(xx = startX+18; xx &lt; startX+width; xx += 72) //Start of boxes/Space between boxes (x values)
    for(yy = startY+56; yy &lt; startY+height; yy += 48){ //Start of boxes/pace betweenn boxes (y values)
 
           coordX[curSlot] = xx;
           coordY[curSlot] = yy;
           
           draw_set_color(c_dkgray);
           draw_set_alpha(0.95);
           draw_rectangle(xx, yy, xx+cellWidth, yy+cellHeight, false);
           
           //drawing number
           draw_set_color(c_white);
           if(global.slotCount[curSlot] &gt; 0)
           draw_text(xx, yy, string(global.slotCount[curSlot])); 
           
           curSlot++;
           if(curSlot &gt;= totalSlots-4) curSlot = 0;
    }
    
    //quick swap 1 slot
    coordX[15] = view_xview[0] + 120;
    coordY[15] = view_yview[0] + 60;
    
    //quick swap 2 slot
    coordX[16] = view_xview[0] + 191;
    coordY[16] = view_yview[0] + 60;
    
    //quick swap 3 slot
    coordX[17] = view_xview[0] + 264;
    coordY[17] = view_yview[0] + 60;
    
    //quick slot 4
    coordX[18] = view_xview[0] + 336;
    coordY[18] = view_yview[0] + 60;
    
    draw_set_color(c_white);
    draw_set_alpha(1);
    if(global.slotCount[18] &gt; 0)
    draw_text(coordX[18], coordY[18], string(global.slotCount[18])); 
    
    //quick swap slots
    //first two lines are for the actual box colour, 2nd two are for the black outline
    draw_set_color(c_green);
    draw_rectangle(coordX[15], coordY[15], coordX[15]+cellWidth, coordY[15]+cellHeight, false);
    draw_set_color(c_black);
    draw_rectangle(coordX[15], coordY[15], coordX[15]+cellWidth, coordY[15]+cellHeight, true);
    
    draw_set_color(c_silver);
    draw_rectangle(coordX[16], coordY[16], coordX[16]+cellWidth, coordY[16]+cellHeight, false);
    draw_set_color(c_black);
    draw_rectangle(coordX[16], coordY[16], coordX[16]+cellWidth, coordY[16]+cellHeight, true);
 
    draw_set_color(make_color_rgb(158,155,252));
    draw_rectangle(coordX[17], coordY[17], coordX[17]+cellWidth, coordY[17]+cellHeight, false);
    draw_set_color(c_black);
    draw_rectangle(coordX[17], coordY[17], coordX[17]+cellWidth, coordY[17]+cellHeight, true);
    
    //quick slot 4
    draw_set_color(c_red);
    draw_rectangle(coordX[18], coordY[18], coordX[18]+cellWidth, coordY[18]+cellHeight, false);
    draw_set_color(c_black);
    draw_rectangle(coordX[18], coordY[18], coordX[18]+cellWidth, coordY[18]+cellHeight, true);
    
    updateInv(cellWidth, cellHeight);
}

draw_set_alpha(1);
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
